*** ĐỀ TÀI ***
- Blog.
	+ users
	+ categories
	+ posts

- Review Sách.
	+ users
	+ categories
	+ posts

- News bóng đá.
	+ users
	+ categories
	+ posts

- News
	+ users
	+ categories
	+ posts


*** DB ***
- roles:
	+ role_id
	+ name
	+ key

- users:
	+ user_id
	+ email: (index)
	+ password
	+ full_name: (index)
	+ birthday <optional>
	+ key_change_passowrd
	+ image
	+ disable: boolean
	- roleId: { ref: roles}

- categories:
	+ category_id
	+ name: (index)
	+ slug: (index)
	+ level:
	+ parent_id <=> category_id
	+ image

- posts:
	+ post_id
	+ detail_post
	+ slug
	+ detail_html
	+ title_post: (index)
	+ category_id: { category_id, level, slug, name } - (index)
	+ user_post: { user_id, email, full_name, role } - (index)

- paging

	+ page
	+ limit

skip( (page - 1) * limit ).limit( limit )

=> page = 1, limit = 2;

skip(0).limit(2).

=> page = 3, limit = 2;

skip(4).limit(2)

5 document
[1, 2, 3, 4, 5] => element
[0, 1, 2, 3, 4] => index

=> [1, 2]
=> [5]
=> totalRows = Math.ceil( count(element) / limit )
=> 5 / 2 = 3
=> pagination  { page, limit, totalRows }


[
	{
		id: 1,
		name: Thi,
		key: "ADMIN"
	},
	{
		id: 2,
		name: Thi khùng,
		key: "ADMIN2"
	}
]

=> requestId = 1. update 
=> name: Thi khùng a
=> key: "ADMIN3"

=> name => findName => 
	- case 1: không tìm thấy id ==> next()
	- case 2: tìm thấy id
		+ id = 2. => Trùng với tên khác
		+ id = 1 => Chính nó
	

if(findName && requestId !== id) {
	return {
		message: "Name nó tồn tại trong hệ thống!",
	}
}

=> findKey =>
	- case 1: không tìm thấy id ==> next()
	- case 2: tìm thấy id
		+ id = 2. => Trùng với tên khác
		+ id = 1 => Chính nó

if(findKey && requestId !== id) {
	return {
		message: "Key nó tồn tại trong hệ thống!",
	}
}

=> Cập nhật lại


--- Xác thực email sau khi đăng ký và đăng nhập

+ Cần tạo thêm 1 field trong model user
+ isVerified: { type: Boolean, default: false }

+ tạo thêm một model tokenSchema
const tokenSchema = new mongoose.Schema({
	_userId: { type: mongoose.Schema.Types.ObjectId, required: true, ref: 'User' },
	token: { type: String, required: true },
	expireAt: { type: Date, default: Date.now, index: { expires: 86400000 } }
});

- Đăng ký.
	+ Sau các bước validation data.
	+ Tạo user mới.
	+ Tạo 1 token để xác thực tài khoản và và lưu token vào db.
	+ Gửi mail xác thực
		+ Tạo ra 1 router để email có thể chuyển hướng tới
			+ http://localhost:5050/api/v1/confirmation/:email/:token
		+ if error khi gửi thì nhấn resend

- Xác thực email:
	+ Router http://localhost:5050/api/v1/confirmation/:email/:token.
	+ Kiểm tra: token có tồn tại ko
		++ No: => Link xác thực đã hết hạn
		++ Yes: => tìm được token => { _userId, ... }
			+++ Tìm user theo trường { _id: _userId, email: req.params.email }
				++++ No: => Không thể xác thực người dùng, vui lòng đăng ký
				++++ Yes => user
					- if(user.isVerified) => return 'User đã xác thực thành công'.
					- else => Đi xác thực người dùng.
						+ Cập nhật isVerified = true và lưu vào db.

- Đăng nhập:
	- Check email
		+ No: => email ko tồn tại
		+ Yes: => email tồn tại => kiểm tra password
	- Check password:
		+ No: => mật khẩu không chính xác.
		+ Yes => kiểm tra người dùng đã xác thực chưa.
	- Check isVerified
		+ No => Kêu người dùng xác thực email
		+ Yes => Đăng nhập thành công.

- Quên mật khẩu:
	- Client: 
		+	Gửi request thay đổi mật khẩu kèm theo:
		+ Email đã được xác thực.
	- Server:
	 	+ Tạo ra 1 token và lưu nó vào db.
		+ Tạo ra router để khi người dùng nhận được mail sẽ chuyển hướng tới.
		+ http://localhost:5050/api/v1/confirmation/change-password/:token
		+ Gửi mail cho email mà client request lên.

- Xác nhận thay đổi mật khẩu:
	- http://localhost:5050/api/v1/confirmation/change-password/:token.
	- Tìm kiếm token trong db.
		+ No: token hết hạn yêu cầu resend email.
		+ Yes: lấy mật khẩu mới hash rồi cập nhật lại password. 
		

+ Phân tích category
###PHƯƠNG THÚC TẠO CATEGORY

- khi dữ liệu được gửi lên
	+Không có level và không có parent_id
		-Tạo ra category gồm có => name, slug, default level = 1 và parent_id = null => thằng này là thằng parent

	+Có level và có parent_id
		-find parent_id =>parentCategory
			+Không tìm thấy => return
			+tìm thấy
				+tạo category gồm có => name, slug, level = 2, parent_id = parent_id =>childrenCategory
				+Push childrenCategory => children[] của thằng parentCategory

	_VD:
	** Lần 1:

		*Client
			-send data ưith
				+name:"Công nghệ",
				+slug:"cong_nghe"

		+Server
			-handle
			+check thấy không có level và parent_id
			=> tạo ra parent category
			=>{
				ID: 1, 
				level: 1,
				parent_id: null,
				name: "Công nghệ",
				slug: "cong_nghe",
				childrens:[]
			}

	** Lần 2:

		*Client
			-send data ưith
				+name:"Blockchain",
				+slug:"blockchain"

		+Server
			-handle
			+check có level và parent_id
			=> tìm parentCategory
				=>Tìm thấy
				=>Tạo childrenCategory

				=>{
					ID: 2, 
					level: 2,
					parent_id: 1,
					name: "Blockchain",
					slug: "blockchain",
					childrens:[]
				}
			=>Push childrenCategory => parentCategory.childrens <==> children[] of parentCategory
			=>save parentCategory => tạo ra
			=>{
				ID: 1, 
				level: 1,
				parent_id: null,
				name: "Công nghệ",
				slug: "cong_nghe",
				childrens:[
					ID: 2, 
					name: "Blockchain",
					slug: "blockchain",
				]
			}
